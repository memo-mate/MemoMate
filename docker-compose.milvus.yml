# Milvus 向量数据库部署配置
#
# Milvus 是一个开源向量数据库，专为 AI 应用设计
#
# 使用方式:
#   docker-compose -f docker-compose.yml -f docker-compose.milvus.yml up -d
#
# 优势:
#   - 高性能向量搜索
#   - 支持多种索引类型
#   - 企业级功能（分片、副本）
#   - 提供 Web 管理界面（Attu）
#
# 版本信息:
#   - Milvus: v2.6.3
#   - etcd: v3.5.18
#   - MinIO: RELEASE.2024-12-18T13-15-44Z
#   - Attu: v2.6

x-restart: &restart_policy
  restart: unless-stopped
  deploy:
    restart_policy:
      condition: on-failure
      delay: 60s

services:
  # Etcd - Milvus 元数据存储
  etcd:
    <<: *restart_policy
    image: quay.io/coreos/etcd:v3.5.18
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - ./data/milvus/etcd:/etcd
    command: etcd -advertise-client-urls=http://etcd:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3

  # MinIO - Milvus 对象存储
  minio:
    <<: *restart_policy
    image: minio/minio:RELEASE.2024-12-18T13-15-44Z
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    ports:
      - "9001:9001"
      - "9000:9000"
    volumes:
      - ./data/milvus/minio:/minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Milvus Standalone
  milvus:
    <<: *restart_policy
    image: milvusdb/milvus:v2.6.3
    command: ["milvus", "run", "standalone"]
    security_opt:
    - seccomp:unconfined
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
      MQ_TYPE: woodpecker  # 使用内置消息队列（推荐用于 standalone 模式）
    volumes:
      - ./data/milvus/milvus:/var/lib/milvus
    ports:
      - "19530:19530"  # gRPC
      - "9091:9091"    # Metrics
    depends_on:
      - etcd
      - minio
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3

  # Attu - Milvus Web 管理界面（可选）
  attu:
    <<: *restart_policy
    image: zilliz/attu:v2.6
    ports:
      - "8001:3000"
    environment:
      MILVUS_URL: milvus:19530
    depends_on:
      - milvus
    deploy:
      replicas: 1  # 默认启动，不需要时设置为 0

  # 后端服务（使用 Milvus）
  backend:
    <<: *restart_policy
    image: memo/memo-fastapi-backend:latest
    env_file:
      - .env
    entrypoint: ["fastapi", "run", "--workers", "4", "app/main.py"]
    environment:
      # 配置使用 Milvus
      - VECTOR_DB_TYPE=milvus
      - MILVUS_HOST=milvus
      - MILVUS_PORT=19530
      - MILVUS_USER=
      - MILVUS_PASSWORD=
      - MILVUS_DB_NAME=default
    depends_on:
      - redis
      - postgres
      - milvus
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 512M

  redis:
    <<: *restart_policy
    image: redis:latest
    env_file:
      - .env
    command: >
      redis-server
      --bind 0.0.0.0
      --requirepass $REDIS_PASSWORD
      --appendonly yes
      --rename-command KEYS ""
    volumes:
      - ./data/redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-h", "localhost", "-p", "6379", "-a", "$REDIS_PASSWORD", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    <<: *restart_policy
    image: postgres:16.3
    env_file:
      - .env
    environment:
      - TZ=Asia/Shanghai
      - POSTGRES_SERVER=db
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - ./data/postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER"]
      interval: 5s
      timeout: 5s
      retries: 10
